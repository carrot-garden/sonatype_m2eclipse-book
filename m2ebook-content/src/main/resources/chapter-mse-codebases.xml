<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.sonatype.com/tmp/docbook/xml/4.5/docbookx.dtd">
<chapter id="mse-codebases">
  <title>Managing MSE Codebases and P2 Lineups</title>

  <section id="mse-codebases-intro">
    <title>Introduction</title>

    <para>Maven Studio for Eclipse (MSE) gives you the ability to capture
    common configuration and projects for your developers with the Developer
    Onboarding feature. Using the Developer Onboarding feature, you can very
    quickly configure and deliver a common configuration across your entire
    enterprise.</para>
  </section>

  <section>
    <title>Creating a MSE Codebase</title>

    <para>There are two ways to create an MSE Codebase:</para>

    <variablelist>
      <varlistentry>
        <term>Create a new P2 Lineup</term>

        <listitem>
          <para>You can create a new P2 Lineup which captures an Eclipse
          configuration including all components and plugins installed in
          Eclipse. After creating and publishing a new P2 Lineup, Maven Studio
          for Eclipse will create a new Codebase and associate it with your
          new P2 Lineup.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Create a new MSE Codebase</term>

        <listitem>
          <para>Alternatively, you can create a new MSE Codebase. This newly
          created MSE Codebase will have an empty P2 Lineup URL which will
          need to be populated using a URL of a previously published P2
          Lineup.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The following sections outline the details of both of these
    approaches.</para>

    <section>
      <title>Creating a New P2 Lineup</title>

      <para>When you create a new P2 Lineup, you are configuring the Eclipse
      installation which will be associated with an MSE Codebase. This
      includes the versions of all components and plugins which will be
      installed by the MSE Installer. Your configuration will be validated
      against a Nexus Team Edition server to ensure that users will have
      access to P2 Proxy repositories for all the components required by your
      P2 Lineup.</para>

      <para>To create a new P2 Lineup in Eclipse, go to File -&gt; New and
      select Other... This will display the wizard selection dialog. Expand
      the Maven Studio for Eclipse folder, and select New P2 Lineup as shown
      in <xref linkend="fig-mse-p2-lineup-wizard" />.</para>

      <figure id="fig-mse-p2-lineup-wizard">
        <title>Selecting the New P2 Lineup Wizard</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-codebase-p20-lineup-wizard.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-codebase-p20-lineup-wizard.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>The initial screen of the new P2 Lineup Wizard shown in <xref
      linkend="fig-mse-lineup-setup" /> captures lineup coordinates and
      information about the target Nexus Team Edition server. A P2 Lineup is
      published to Nexus and stored with a set of lineup coordinates: Group
      Id, Artifact Id, and Version. These coordinates uniquely identify a
      published P2 Lineup. </para>

      <figure id="fig-mse-lineup-setup">
        <title>Initial Screen of Lineup Wizard: Lineup Setup</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-p2-lineup-setup.png" scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-p2-lineup-setup.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Clicking Next loads the Lineup Editor shown in <xref
      linkend="fig-mse-lineup-editor" />. The Lineup Editor displays two
      sections: Installable Units and Repositories. The Installable Units
      section configures the plugins and components which are going to be
      installed as a part of the MSE Codebase materialization. There are two
      components which will always be a part of every MSE Codebase:</para>

      <variablelist>
        <varlistentry>
          <term>Maven Studio Materialization Support</term>

          <listitem>
            <para>This component contains the framework which supports MSE
            Codebase materialization. The verion number 0.0.0 tells Eclipse to
            use the latest available version.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Sonatype Studio Base IDE Lineup</term>

          <listitem>
            <para>This component combines the basic features of Sonatype
            Studio including support for Subversion, Git, and support for the
            Sonatype m2eclipse component.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>The Repositories section of the Lineup Edition contains all of the
      repositories required for a successful MSE Codebase materialization. You
      can add new repositories to this list to support the installation of
      addition installable units. For example, in <xref
      linkend="fig-mse-lineup-editor" />, the Repositories section contains an
      extra repository http://eclipse-cs.sf.net/update. This repository
      corresponds to the Eclipse Checkstyle Plugin-in feature listed under
      Installable Units.</para>

      <para>The Validate button in the Lineup Editor causes Maven Studio to
      connect to Nexus Team Edition and verify that all repositories and
      installable units are available. If you have added a new repository to
      the Lineup Editor, you will also need to add a new P2 Proxy repository
      to Nexus Team Edition. The Manage Nexus repositories link below the
      Repositories section will load the repositories list in Nexus Team
      Edition. If you need to add additional P2 Proxy repositories to support
      custom lineups, click on this Manage Nexus Repositories button and
      create any appropriate repositories in your Nexus Team Edition
      installation.</para>

      <figure id="fig-mse-lineup-editor">
        <title>Editing a New P2 Lineup</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/quickstart-create-new-lineup-lineup-editor.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/quickstart-create-new-lineup-lineup-editor.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>To a new an installable unit to a P2 Lineup, click on Add... next
      to the list of Installable Units in the Lineup Editor shown in <xref
      linkend="fig-mse-lineup-editor" />. Clicking on Add... will load the Add
      Installable Unit dialog shown in <xref
      linkend="fig-mse-add-installable-unit" />. Select an existing
      repository, or paste a new Update Site URL into the Work with dropdown
      field, then select the appropriate Installable Units in this dialog.
      Clicking on OK will then return you to the P2 Lineup Editor with the
      Installation Units select added to the list of Installable Units
      configured for your new P2 Lineup.</para>

      <figure id="fig-mse-add-installable-unit">
        <title>Add an Installable Unit to a P2 Lineup</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-p2-add-installable-unit.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-p2-add-installable-unit.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>To add a repository to a P2 Lineup, click on Add... next to the
      list of repositories shown in <xref linkend="fig-mse-lineup-editor" />.
      This will display the Add Repository dialog shown in <xref
      linkend="fig-mse-add-repository-to-lineup" />. When you add a repository
      to a P2 Lineup, you need to make sure that Nexus Team Edition has a
      matching P2 Proxy repository.</para>

      <figure id="fig-mse-add-repository-to-lineup">
        <title>Add a Repository to a P2 Lineup</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-p2-add-repository.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-p2-add-repository.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>Once you are finished configuring you new P2 Lineup in the Lineup
      Editor shown in <xref linkend="fig-mse-lineup-editor" /> click Next. You
      will then see the New MSE Codebase Descriptor dialog shown in <xref
      linkend="fig-mse-summary-new-p2" />. Clicking Finish will cause Sonatype
      Studio to publish the new P2 Lineup to Nexus Team Edition and open a new
      MSE Codebase Overview form with the P2 Lineup field populated with the
      results of this wizard.</para>

      <figure id="fig-mse-summary-new-p2">
        <title>Summary of New P2 Lineup Identifiers</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-codebase-new-codebase-wizard.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-codebase-new-codebase-wizard.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Creating a New MSE Codebase</title>

      <para>If you already have a P2 Lineup configured, and you want to create
      a new MSE Codebase. You can create a new MSE Codebase directly by going
      to File -&gt; New, selecting Other.... Expand the Maven Studio for
      Eclipse folder and then select New Codebase Project as shown in <xref
      linkend="fig-mse-new-codebase-wizard" />.</para>

      <figure id="fig-mse-new-codebase-wizard">
        <title>Selecting the New Codebase Project Wizard</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-codebase-wizard.png" scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-codebase-wizard.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Configuring a MSE Codebase</title>

    <para>Once you create a codebase, you will see the Codebase Overview shown
    in <xref linkend="fig-mse-codebase-overview" />. The MSE Codebase
    settings, MSE Source Trees, resources, and security are all configured
    from this interface. Once a Codebase has been properly configured, the
    codebase is saved as an XML file and then published to Nexus Team edition.
    The Codebase editor contains the following sections:</para>

    <variablelist>
      <varlistentry>
        <term>Codebase Information</term>

        <listitem>
          <para>This section contains identifiers, URLs, a name, a
          description, and a logo for the MSE Codebase. This section is
          described in more detail in <xref
          linkend="mse-codebase-sect-code-info" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Source Trees</term>

        <listitem>
          <para>An MSE Codebase contains one or more Source Trees. A source
          tree is a location in a source control server like Git or Subversion
          and it corresponds to a project or set of projects in an Eclipse
          environment. This section is described in more detail in <xref
          linkend="mse-codebase-sect-source-tree" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Locations</term>

        <listitem>
          <para>Locations holds URLs and resources which are associated with
          an MSE Codebase. The P2 Lineup Location points to a file hosted by
          Nexus Team Edition which describes the configuration of Eclipse, and
          the Maven Settings and Eclipse Preferences associate configuration
          data with an MSE Codebase. This section is described in more detail
          in <xref linkend="mse-codebase-sect-location" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Prerequisites</term>

        <listitem>
          <para>This section contains configuration values which affect the
          operation of Eclipse. This section is described in more detail in
          <xref linkend="mse-codebase-sect-prereqs" />.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Realms</term>

        <listitem>
          <para>When the MSE Installer connects to remote resources to
          download settings, configuration, source control, or P2 Lineups, it
          stores credentials in Security Realms. This list of realms will be
          used to populate realm dropdownds throughout the Codebase and Source
          Tree editors. This section is described in more detail in .</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <figure id="fig-mse-codebase-overview">
      <title>Codebase Overview</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-overview.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-overview.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>At the bottom of the Codebase Editor, you will see a series of tabs
    for each of the configured MSE Source Trees. Source trees are locations in
    a source control system which correspond to one of more projects in an
    Eclipse workspace. The process for creating and managing source trees is
    described in more detail in <xref
    linkend="mse-codebase-sect-source-tree" />.</para>

    <para>Once a Codebase has been configured and saved, Maven Studio for
    Eclipse will have a project in the Project Explorer named after the
    Artifact ID of your Codebase which contains up to three files:</para>

    <variablelist>
      <varlistentry>
        <term>mse-codebase.xml</term>

        <listitem>
          <para>This is the MSE Codebase descriptor, it is the XML file which
          is published to Nexus Team Edition, and which is used to configured
          the Java WebStart JNLP application which is used to start the MSE
          Installer.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mse-codebase-preferences.jar</term>

        <listitem>
          <para>If you have configured the MSE Codebase editor to generate,
          publish, and associate Eclipse preferences with an MSE Codebase,
          this JAR file will contain an export of the selected Eclipse
          preferences.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>mse-codebase-icon.png</term>

        <listitem>
          <para>This is the 48x48 icon which is used to represent this MSE
          Codebase in an MSE Catalog.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <figure id="fig-mse-codebase-project-files">
      <title>Codebase Project Files</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-files.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-files.pdf" scalefit="0"
                     width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="mse-codebase-sect-code-info">
    <title>Configuring Codebase Information</title>

    <para>The Codebase Information section shown in <xref
    linkend="mse-fig-codebase-info" /> contains identifiers, URLs, a name, a
    description, and an application icon for the Codebase. This section
    contains the following fields:</para>

    <variablelist>
      <varlistentry>
        <term>Group Id</term>

        <listitem>
          <para>The group Id is an arbitrary, organization or project-specific
          identifier which generally matches the reversed, period-delimited
          domain name of an organization plus any additional project
          identifiers. Examples: com.google, com.sonatype.nexus,
          org.apache.maven.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Artifact Id</term>

        <listitem>
          <para>The Codebase project identifier. This artifact id is used to
          identify a codebase as an Eclipse project. Examples: developers
          working in the Ecommerce group would materialize a Codebase with an
          artifactId of "ecommerce".</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Version</term>

        <listitem>
          <para>A version adheres to the following format: "&lt;Major
          Version&gt;.&lt;Minor Version&gt;.&lt;Point Release&gt;". Examples:
          The first version of the "ecommerce" codebase may have a version
          number "1.0.0". A small update to this codebase would have the
          version number "1.1.0", and a major revision would have a version of
          "2.0.0.".</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term>Name</term>

        <listitem>
          <para>This field stores a descriptive name for a codebase.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Description</term>

        <listitem>
          <para>This field contains a short, paragraph-long description of a
          codebase.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Image</term>

        <listitem>
          <para>Every codebase can be associated with a 48x48 icon. Although
          this icon is not currently displayed by Nexus Team Edition or the
          MSE Installer, this icon will be visible in the upcoming Maven
          Studio for Eclipse Catalog feature.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <variablelist>
      <varlistentry>
        <term>Homepage</term>

        <listitem>
          <para>This field contains a URL to the homepage associated with a
          codebase. This can be a page specific to the project or workgroup
          which is using this Codebase.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Documentation</term>

        <listitem>
          <para>This field contains a URL to a documentation page to be
          associated with a Codebase.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <figure id="mse-fig-codebase-info">
      <title>Configuring Codebase Information</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-information.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-information.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="mse-codebase-sect-location">
    <title>Managing Codebase Resource Locations</title>

    <para>In the MSE Codebase editor, the Locations section shown in <xref
    linkend="fig-mse-codebase-resources" /> tracks important configuration
    resources which can be associated with a Codebase. The resources
    are:</para>

    <variablelist>
      <varlistentry>
        <term>Security Realm</term>

        <listitem>
          <para>The MSE Installer will use a single security realm to access
          all of the resources listed in the Location section. Although there
          are no restrictions for the URLs used in this section, the MSE
          Installer was designed with the expectation that all external
          configuration resources would be downloaded from the same Nexus
          server.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>P2 Lineup Location</term>

        <listitem>
          <para>If you created your MSE Codebase using the New P2 Lineup
          wizard, the P2 Lineup wizard finished and then immediately loaded a
          new MSE Codebase with this field pre-populated. If you created a new
          MSE Codebase using the New MSE Codebase wizard, this field will be
          empty and you will need to supply a URL from Nexus Team
          edition.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Maven Settings</term>

        <listitem>
          <para>This field contains a URL for your Maven Settings. Nexus
          Professional provides support for managing user-specific Maven
          Settings. To learn more about using Nexus Professional to manage and
          distribute Maven Settings, read <ulink
          url="http://www.sonatype.com/books/nexus-book/reference/security.html">"Managing
          Maven Settings"</ulink> chapter in <ulink
          url="http://www.sonatype.com/books/nexus-book/reference/security.html">Repository
          Management with Nexus</ulink>. If you are using the default Maven
          Settings location in Nexus, your URL will resemble the following
          URL:
          http://localhost:8081/nexus/service/local/templates/settings/default/content</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Eclipse Preferences</term>

        <listitem>
          <para>An MSE Codebase can distribute a set of common Eclipse
          preferences to cature common configuration settings that cover code
          standards, Aspect-oriented programming settings, and m2eclipse
          configuration.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <figure id="fig-mse-codebase-resources">
      <title>Configuring Codebase Resources</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-resources.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-resources.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Publishing Eclipse Preferences</title>

      <para>The MSE Codebase editor can capture your Eclipse preferences and
      publish them to a Nexus repository manager. Open the Eclipse Preferences
      dialog shown in <xref linkend="fig-mse-export-preferences" /> by
      clicking on the Select... button in <xref
      linkend="fig-mse-codebase-resources" />. </para>

      <para>To publish Eclipse preferences from the current Eclipse
      installation, select "Export workspace preferences" and select all of
      the preference categories you want to publish in this MSE Codebase. The
      available preferences categories:</para>

      <variablelist>
        <varlistentry>
          <term>PROXY</term>

          <listitem>
            <para>Proxy configuration captures proxy configuration under
            General -&gt; Network Connections from the Eclipse
            preferences.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>JDT</term>

          <listitem>
            <para>Selecting this group captures all configuration under the
            "Java" category from the Eclipse preferences.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>M2E</term>

          <listitem>
            <para>Selecting this group captures all configuration under the
            "Maven" category from the Eclipse preferences.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>After configuring a codebase to publish Eclipse settings, save
      your Codebase and you should see a file named
      mse-codebase-preferences.jar associated with the MSE Codebase in the
      Project Explorer. When the Codebase is published to Nexus Team edition,
      this preferences JAR file will be published to the repository manager
      and associated with the published MSE Codebase.</para>

      <para>You can associate an MSE Codebase with a set of previous published
      Eclipse preferences by selecting "External URL" and supplying the URL to
      a set of Eclipse preferences. The most common scenarios for using an
      existing, external URL is when an MSE Codebase is referencing Eclipse
      preferences from another MSE Codebase.</para>

      <figure id="fig-mse-export-preferences">
        <title>Configuring Eclipse Preferences for a Codebase</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-codebase-eclipse-preferences.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-codebase-eclipse-preferences.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Publishing Maven Settings</title>

      <para>An important component of Maven configuration is a Maven Settings
      file usually stored in <filename>~/.m2/settings.xml</filename>. This
      file contains credentials, profiles, and preferences which can use used
      to customize configuration variables for individual developers. Nexus
      Team Edition and Nexus Professional Edition provide you with the ability
      to store and managed Maven Settings files for developers. If you have
      configured Maven Settings in Nexus, you should supply the Template URL
      to the MSE Codebase editor. When the MSE Installer materializes a new
      Eclipse installation it will download a settings.xml from the Template
      URL and interpolate that template with two substitution
      variables:</para>

      <variablelist>
        <varlistentry>
          <term>\${baseurl}</term>

          <listitem>
            <para>This is the Base URL for the Nexus server responsible for
            delivering the Maven Settings template. If you codebase is
            configured to download Maven Settings from
            "http://central.example.org/nexus/server/local/templates/settings/default/content",
            the \${baseurl} will be replaced with
            "http://central.example.org/nexus/".</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>\${userId}</term>

          <listitem>
            <para>This is the user identifier for the user making the request
            for Maven Settings. If your MSE Code contains a security realm for
            Nexus, this \${userId} value in a settings.xml template will be
            replaced with the username supplied to the MSE Installer for the
            Nexus realm.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para><xref linkend="mse-fig-codebase-info" /> shows the Maven Settings
      configuration panel from Nexus Team Edition. To configure an MSE
      Codebase to download the "enterprise-webapp-team" Maven Settings
      template, you would supply the URL listed in the Template URL column to
      the MSE Codebase editor.</para>

      <figure id="mse-fig-settings-template">
        <title>Configuring Codebase Information</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-codebase-settings-in-nexus.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-codebase-settings-in-nexus.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>

      <para>To learn more about using Nexus Professional to manage and
      distribute Maven Settings, read <ulink
      url="http://www.sonatype.com/books/nexus-book/reference/security.html">"Managing
      Maven Settings"</ulink> chapter in <ulink
      url="http://www.sonatype.com/books/nexus-book/reference/security.html">Repository
      Management with Nexus</ulink>.</para>
    </section>
  </section>

  <section id="mse-codebase-sect-prereqs">
    <title>Setting Codebase Prerequisites</title>

    <para>The Codebase editor contains a section to configure prerequisites.
    The Required Memory field shown in <xref
    linkend="fig-mse-codebase-prerequisites" /> allows you to configure the
    validation criteria which must be satisfied before the MSE Installer will
    materialize a codebase. The MSE Installer will test the workstation to see
    if it has sufficient memory to perform a materialization.</para>

    <figure id="fig-mse-codebase-prerequisites">
      <title>Configuring Codebase Prerequisites</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-prerequisites.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-prerequisites.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="mse-codebase-sect-source-tree">
    <title>Managing Codebase Source Trees</title>

    <para>A Source Tree is a location in source control which corresponds to
    one or more projects in an Eclipse environment. To add a new Source Tree,
    click on the Create.. button next to the Source Trees section of the
    Codebase editor as shown in <xref
    linkend="fig-mse-configuring-source-trees" />.</para>

    <figure id="fig-mse-configuring-source-trees">
      <title>Configuring Codebase Source Trees</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-source-trees.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-source-trees.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To delete a Source Tree from an MSE Codebase, select the Codebase in
    the Source Trees section of the MSE Codebase editor and click on the
    Delete button. Eclipse will then present you with a confirmation dialog to
    make sure that you really want to delete the selected Source Tree.</para>
  </section>

  <section>
    <title>Configuring Codebase Security</title>

    <para>Each Codebase is associated with one or more Security Realms. The
    MSE Installer stores credentials in secure storage in Security Realms.
    Create security realms for each resource that requires a separate set of
    credentials. The Realms section of the Codebase Overview, as shown in
    <xref linkend="fig-mse-codebase-realms" />, contains the list of all
    realms used throughout an MSE Codebae.</para>

    <figure id="fig-mse-codebase-realms">
      <title>Configuring Codebase Realms</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-security-realms.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-security-realms.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To add a new Security Realm to a Codebase, click on the Create...
    button shown in <xref linkend="fig-mse-codebase-realms" /> and supply a
    new name for the Security Realm in the dialog shown in <xref
    linkend="fig-mse-add-security-realm" />.</para>

    <figure id="fig-mse-add-security-realm">
      <title>Adding a New Security Realm</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-new-security-realm.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-new-security-realm.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>

  <section id="mse-codebase-sect-tree">
    <title>Configuring a Source Tree</title>

    <para>Every MSE Codebase can contain one or more Source Trees. A Source
    Tree is a location in source control containing one or more Maven
    projects. To illustrate the relationship between a Codebase and a Source
    Tree, consider the example illustrated in <xref
    linkend="fig-mse-two-codebases" />. A company has two MSE Codebases: one
    codebase is used by a team which develops a web application, another
    codebase is used by a team which develops a client-side application
    written in Swing. Both teams use a common library, and both teams maintain
    a separate Subversion repository which contains team-specific code. Each
    team would have a custom MSE Codebase with two Source Trees, and both of
    these codebases would include a Source Tree for the Common Library
    project.</para>

    <figure id="fig-mse-two-codebases">
      <title>Two Codebases with an Overlapping Source Tree</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/codebase-source-trees.png" scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/codebase-source-trees.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>To open the Source Tree editor, go to the Codebase Overview, and
    click on one of the Source Tree tabs below the Codebase Overview as shown
    in <xref linkend="fig-mse-codebase-overview" />. If there are no Source
    Trees to edit, create a Source Tree by following the directions in <xref
    linkend="mse-codebase-sect-source-tree" />. The Source Tree editor is
    shown in <xref linkend="fig-mse-source-tree-overview" />.</para>

    <figure id="fig-mse-source-tree-overview">
      <title>Configuring an MSE Codebase Source Tree</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-sourcetree-overview.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-sourcetree-overview.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <section>
      <title>Adding a Maven Profile</title>

      <para>The Source Tree editor allows you to add a Maven Profile which
      will be made active for every project in a particular Source Tree. To
      add a new Maven Profile to a Source Tree, click on the Create button in
      th Profiles section of the Source Tree Overview shown in <xref
      linkend="fig-mse-source-tree-overview" />. Once you click create, type
      in the name of the profile you want activated into the dialog shown in
      <xref linkend="fig-mse-add-maven-profile" />.</para>

      <figure id="fig-mse-add-maven-profile">
        <title>Adding a Maven Profile</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-codebase-add-maven-profile.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-codebase-add-maven-profile.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Adding a New Feed URL</title>

      <para>The Source Tree editor allows you to add feeds which will be made
      available to developers working with this materialized MSE Codebase. To
      add a new Feed URL, click on Create in the Feed section of the Source
      Tree Overview shown in <xref linkend="fig-mse-source-tree-overview" />.
      </para>

      <figure id="fig-mse-add-feed-url">
        <title>Adding a New Feed URL</title>

        <mediaobject>
          <imageobject role="web">
            <imagedata contentdepth="100%"
                       fileref="figs/web/mse-codebase-add-feed-url.png"
                       scalefit="1" />
          </imageobject>

          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/mse-codebase-add-feed-url.pdf"
                       scalefit="0" width="100%" />
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section>
    <title>Publishing an MSE Codebase to Nexus Team Edition</title>

    <para>An MSE Codebase is published to Nexus Team Edition where it is then
    made available to clients for materialization. To publish an MSE Codebase,
    open the Codebase Overview and click on the Publish button shown in <xref
    linkend="fig-mse-codebase-publish-button" />.</para>

    <figure id="fig-mse-codebase-publish-button">
      <title>Codebase Publish Button</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-publish-button.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-publish-button.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>

    <para>Clicking the Publish button will show the Publish Codebase
    Descriptor dialog shown in <xref
    linkend="fig-mse-publish-codebase-dialog" />. This dialog contains the URL
    and credentials that Maven Studio for Eclipse will use to connect to Nexus
    Team Edition. Clicking on the Publish button in this dialog will then
    cause Maven Studio for Eclipse to connect to Nexus Team Edition and
    transfer the codebase to Nexus Team Edition.</para>

    <figure id="fig-mse-publish-codebase-dialog">
      <title>Publish Codebase Dialog</title>

      <mediaobject>
        <imageobject role="web">
          <imagedata contentdepth="100%"
                     fileref="figs/web/mse-codebase-publish-dialog.png"
                     scalefit="1" />
        </imageobject>

        <imageobject role="print">
          <imagedata align="center"
                     fileref="figs/print/mse-codebase-publish-dialog.pdf"
                     scalefit="0" width="100%" />
        </imageobject>
      </mediaobject>
    </figure>
  </section>
</chapter>
